SELECT * FROM fact

SELECT * FROM Location

SELECT * FROM Product


-- Tasks to be performed:
-- 1. Display the number of states present in the LocationTable.

select count(distinct STATE) as count_of_state 
from LOCATION

-- 2. How many products are of regular type?

select * from Product as Product_count 
where Type ='Regular'

-- 3. How much spending has been done on marketing of product ID 1?

select sum(MARKETING) as Total_Marketing_on_product_id_1 
from Fact 
where ProductId = 1

-- 4. What is the minimum sales of a product?

SELECT MIN(SALES) AS MIN_SALES FROM FACT

-- 5. Display the max Cost of Good Sold (COGS).

SELECT MAX(COGS) AS MAX_COGS FROM FACT

-- 6. Display the details of the product where product type is coffee.

SELECT * FROM PRODUCT
WHERE PRODUCT_TYPE='COFFEE'

-- 7. Display the details where total expenses are greater than 40.

SELECT * FROM FACT
WHERE Total_Expenses>40

-- 8. What is the average sales in area code 719?

SELECT AVG(SALES) AS AVERAGE_OF_SALES
FROM FACT
WHERE Area_Code=719

-- 9. Find out the total profit generated by Colorado state.

SELECT SUM(PROFIT) AS TOTAL_PROFIT
FROM FACT F INNER JOIN LOCATION L ON F.Area_Code = L.Area_Code
WHERE STATE = 'COLORADO'

-- 10. Display the average inventory for each product ID.

SELECT * FROM FACT

SELECT PRODUCTID, AVG(INVENTORY) AS AVERAGE_INVENTORY 
FROM FACT
GROUP BY ProductId
ORDER BY ProductId

-- 11. Display state in a sequential order in a Location Table.

SELECT DISTINCT STATE FROM LOCATION ORDER BY STATE

-- 12. Display the average budget of the Product where the average budget
-- margin should be greater than 100.

SELECT * FROM FACT
SELECT PRODUCTID, AVG(BUDGET_MARGIN) AS AVG_BUDGET 
FROM FACT 
GROUP BY PRODUCTID
HAVING AVG(BUDGET_MARGIN)>100
ORDER BY ProductId

-- 13. What is the total sales done on date 2010-01-01?

SELECT SUM(SALES) AS TOTAL_SALES
FROM FACT
WHERE DATE = '2010-01-01'

-- 14. Display the average total expense of each product ID on an individual date.

SELECT PRODUCTID, DATE, AVG(TOTAL_EXPENSES) AS AVERAGE_TOTAL_EXPENSES
FROM FACT
GROUP BY PRODUCTID,DATE
ORDER BY PRODUCTID

-- 15. Display the table with the following attributes such as date, productID,
-- product_type, product, sales, profit, state, area_code.

SELECT F.PRODUCTID, F.DATE, F.SALES, F.PROFIT, 
L.AREA_CODE, L.STATE, 
P.PRODUCT_TYPE, P.PRODUCT  
FROM FACT F 
INNER JOIN 
LOCATION L ON F.Area_Code = L.Area_Code
INNER JOIN
PRODUCT P ON F.ProductId = P.ProductId
ORDER BY ProductId

-- 16. Display the rank without any gap to show the sales wise rank.

SELECT PRODUCTID, SALES, DENSE_RANK() OVER(PARTITION BY PRODUCTID ORDER BY SALES DESC) AS SALES_WISE_RANK_PER_PRODUCTID FROM FACT

SELECT PRODUCTID, SALES, DENSE_RANK() OVER(ORDER BY SALES DESC) AS SALES_WISE_RANK FROM FACT

-- 17. Find the state wise profit and sales.

SELECT L.STATE, SUM(F.PROFIT) AS PROFIT, SUM(F.SALES) AS SALES
FROM LOCATION L INNER JOIN FACT F
ON L.AREA_CODE = F.AREA_CODE 
GROUP BY STATE
ORDER BY STATE

-- 18. Find the state wise profit and sales along with the product name.

SELECT L.STATE,P.PRODUCT, SUM(F.PROFIT) AS PROFIT, SUM(F.SALES) AS SALES
FROM LOCATION L INNER JOIN FACT F
ON L.AREA_CODE = F.AREA_CODE 
INNER JOIN PRODUCT P ON P.PRODUCTID = F.PRODUCTID
GROUP BY STATE,Product
ORDER BY STATE

-- 19. If there is an increase in sales of 5%, calculate the increasedsales.

SELECT PRODUCTID, SALES, (SALES*1.05) AS NEW_SALES
FROM FACT

SELECT PRODUCTID, SALES, (SALES*1.05) COALESCE(SALES + 0.05*SALES, SALES) AS NEW_SALES
FROM FACT

-- 20. Find the maximum profit along with the product ID and producttype.

SELECT P.PRODUCTID, P.PRODUCT_TYPE, P.TYPE, MAX(F.PROFIT) AS MAX_PROFIT
FROM FACT F 
INNER JOIN PRODUCT P ON F.ProductId = P.ProductId
GROUP BY P.PRODUCTID,P.Product_Type, P.Type

-- 21. Create a stored procedure to fetch the result according to the product type
-- from Product Table.

CREATE PROCEDURE P1(@X VARCHAR(20))
AS
BEGIN
	SELECT * FROM PRODUCT WHERE Product_Type = @X
END

EXEC P1 'Coffee'

-- 22. Write a query by creating a condition in which if the total expenses is less than
-- 60 then it is a profit or else loss.

SELECT PRODUCTID,DATE,TOTAL_EXPENSES, IIF(TOTAL_EXPENSES<60,'PROFIT','LOSS') AS STATUS
FROM FACT
ORDER BY PRODUCTID

-- 23. Give the total weekly sales value with the date and product ID details. Use
-- roll-up to pull the data in hierarchical order.

SELECT PRODUCTID, DATEPART(WEEK,DATE) AS WEEKNUM, SUM(SALES) FROM FACT
GROUP BY ROLLUP(PRODUCTID,DATEPART(WEEK,DATE))


-- 24. Apply union and intersection operator on the tables which consist of
-- attribute area code.

SELECT AREA_CODE FROM FACT
UNION
SELECT AREA_CODE FROM LOCATION

SELECT AREA_CODE FROM FACT
UNION ALL
SELECT AREA_CODE FROM LOCATION

SELECT AREA_CODE FROM FACT
INTERSECT
SELECT AREA_CODE FROM LOCATION

-- 25. Create a user-defined function for the product table to fetch a particular
-- product type based upon the user’s preference.

CREATE FUNCTION F1(@X VARCHAR(20))
RETURNS TABLE
AS 
	RETURN (SELECT * FROM PRODUCT WHERE Product_Type = @X)


SELECT * FROM DBO.F1('COFFEE')

-- 26. Change the product type from coffee to tea where product ID is 1 and undo it.

BEGIN TRANSACTION
UPDATE PRODUCT SET Product_Type = 'Tea' WHERE ProductId = 1 -- CHANGES MADE
SELECT * FROM PRODUCT
ROLLBACK TRANSACTION -- CHANGES UNDID
SELECT * FROM PRODUCT

-- 27. Display the date, product ID and sales where total expenses are between 100 to 200.

SELECT PRODUCTID,DATE,SALES 
FROM FACT 
WHERE Total_Expenses BETWEEN 100 AND 200
ORDER BY PRODUCTID

-- 28. Delete the records in the Product Table for regular type.

BEGIN TRANSACTION -- USING THIS SO I CAN REVERSE CHANGES LATER

DELETE FROM PRODUCT WHERE Type = 'Regular'
SELECT * FROM PRODUCT

ROLLBACK TRANSACTION

-- 29. Display the ASCII value of the fifth character from the columnProduct.

SELECT PRODUCT,ASCII(SUBSTRING(PRODUCT,5,5)) AS ASCII_VALUE_OF_FIFTH_CHARACTER FROM PRODUCT
